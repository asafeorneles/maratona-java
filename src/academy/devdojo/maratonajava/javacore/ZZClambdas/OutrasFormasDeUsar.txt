NÃ£o Ã© sÃ³ o Comparator<> Que Ã© possÃ­vel de se usar criando uma classe concreta. Podemos fazer isso com outras interfaces funcionais, por exemplo:

ðŸ‘‡ Exemplo completo com Predicate (String de tamanho 5)
1. Classe concreta
class PredicatePorTamanhoString implements Predicate<String> {
    @Override
    public boolean test(String s) {
        return s.length() == 5;
    }
}


Uso:

PredicatePorTamanhoString predicate = new PredicatePorTamanhoString();
System.out.println(filtrar(names, predicate));

2. Classe anÃ´nima
System.out.println(filtrar(names, new Predicate<String>() {
    @Override
    public boolean test(String s) {
        return s.length() == 5;
    }
}));

3. Lambda
System.out.println(filtrar(names, s -> s.length() == 5));

âš¡ Generalizando

VocÃª pode fazer isso com qualquer uma das interfaces de java.util.function:

Consumer â†’ classe concreta que imprime um valor, ou System.out::println como lambda.

Function â†’ classe concreta que transforma algo, ou (x -> x.toUpperCase()) como lambda.

Supplier â†’ classe concreta que retorna um valor, ou () -> "Hello" como lambda.

Runnable â†’ classe concreta com run(), ou () -> System.out.println("rodando").