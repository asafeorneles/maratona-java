     Optional:
  Optional √© uma interface que tem como objetivo evitar o NullPointException, pois com ele e seus m√©todos, √© poss√≠vel tratar o que faremos caso o elemento seja null, caso nao seja podemos
    implementar uma l√≥gica tamb√©m.

EXERCICIO:
Procure o mang√° por t√≠tulo, se existir atualize o t√≠tulo do mang√°.
Procure por id, se nao existir, lan√ßa excess√£o
Procure por t√≠tulo, caso nao exista, crie um novo mang√°

M√âTODOS DO OPTIONAL<T>;

M√©todo usado	            Tipo de retorno	       Explica√ß√£o
.ifPresent(Consumer)	    void	               Executa a√ß√£o se existir valor, mas n√£o devolve nada
.map(Function)	            Optional<R>	           Transforma o valor dentro do Optional
.flatMap(Function)	        Optional<R>	           Mesma ideia, mas evita Optional aninhado
.orElse(T)	                T	                   Extrai o valor ou devolve um valor padr√£o
.orElseGet(Supplier)	    T	                   Extrai ou gera um novo valor sob demanda
.orElseThrow(Supplier)	    T	                   Extrai ou lan√ßa exce√ß√£o se vazio
.get()	                    T	                   Extrai o valor (lan√ßa exce√ß√£o se vazio ‚Äî menos seguro)

DIFEREN√áA DO MAP E DO FLATMAP DO OPTIONAL

‚ö†Ô∏è Caso 1 ‚Äì Usando .map()
Optional<String> city = optUser
        .map(user -> user.getAddress().getCity());

üí• Aqui acontece o seguinte:
O optUser cont√©m um User, ent√£o o map() executa a fun√ß√£o.
Dentro da fun√ß√£o, user.getAddress() retorna null.
O Java tenta fazer null.getCity() ‚Üí NullPointerException antes mesmo do .orElse().
üß® Ou seja, map() n√£o protege de null dentro da fun√ß√£o.

‚úÖ Caso 2 ‚Äì Usando .flatMap()
Agora veja com seguran√ßa:

Optional<String> city = optUser
        .flatMap(user -> Optional.ofNullable(user.getAddress())) // <- protege aqui!
        .map(Address::getCity);

‚ú® Aqui o que acontece:
O optUser cont√©m um User.
O flatMap executa user -> Optional.ofNullable(user.getAddress()).
Se getAddress() for null, vira Optional.empty().
Se tiver endere√ßo, vira Optional<Address> com o valor.
O flatMap ‚Äúachata‚Äù isso, ou seja, o resultado √©:

Optional<Address> se existir, ou
Optional.empty() se n√£o existir.

Depois o .map(Address::getCity) s√≥ roda se o Optional n√£o estiver vazio.
E se tudo estiver vazio, voc√™ pode fechar com:
city.orElse("Sem cidade cadastrada");